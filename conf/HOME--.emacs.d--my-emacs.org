:PROPERTIES:
:header-args:emacs-lisp: :noweb no-export :tangle yes
:END:
#+STARTUP: content

* About this file
This file gives a detailed description of my emacs configuration,
and moreover, thanks to the support for literate programming of org-mode,
it's executable.

The structure of this file is simply a serial of loosely coupled commands,
like all other people's emacs configuration. All dependencies are gathered
and placed at the beginning to retain an uniform set of names thoughout
the configuring. The same reason is also applied to helpers. All helper
functions have a name starting with 'my', and if it's only used in this file,
'my' is followed by '--', else '-'.

#+begin_src emacs-lisp
  (setq package-archives
        '(("gnu"    . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("nongnu" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
          ("melpa"  . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
  (package-initialize)
  <<dependencies>>
  <<helpers>>
#+end_src

* Package Management

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

* Appearance

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (set-scroll-bar-mode nil)
  (menu-bar-mode -1)
  (add-to-list 'default-frame-alist
  	     '(font . "DejaVu Sans Mono-17"))
#+end_src

* Workflow

** Project
All actions towards a particular codebase are gatherred in
a project-based session. The meaning of project here follows
the definition given by Emacs.

#+begin_src emacs-lisp :tangle no :noweb-ref dependencies
  (require 'project)
#+end_src

Emacs can not find the true root of project in case there are
submodules of submodules. This helper function recursively
call 'project-try-vc' until the result unchanged.

#+begin_src emacs-lisp :tangle no :noweb-ref helpers
  (defun my-stabilize-on (f v)
    (let ((new-v (funcall f v)))
      (if (equal new-v v)
  	v
        (my-stabilize-on f new-v))))

  (defun my--project-try-vc (tag-d)
    (project-try-vc (caddr tag-d)))
  	
  (defun my-find-vc-root (d)
    (my-stabilize-on 'my--project-try-vc (project-try-vc d)))
#+end_src

#+begin_src emacs-lisp
  (setq project-mode-line t)
  (add-to-list 'project-find-functions 'my-find-vc-root)
#+end_src

** Session
Emacs only supports constant paths to search for the desktop file.
So this is the most dynamic way I can use to specify search path.
The custom here is to go to the root of the project, run Emacs, then
Emacs will create a new session or continue the previous session
based on this directory.

#+begin_src emacs-lisp
  (setq desktop-path '("."))
  (desktop-save-mode 1)
#+end_src

** Editing
Instead of editing multiple files at same time in different windows
of a frame, I preserve screen space for referencing when editing.
Different editing points are seperated to different tabs.

#+begin_src emacs-lisp
  (setq tab-bar-tab-hints t)
  (setq tab-bar-select-tab-modifiers '(control))
  (tab-bar-mode)
#+end_src

* Miscellaneous

#+begin_src emacs-lisp
  (setq dired-maybe-use-globstar t)
  (setq dired-listing-switches "-ahl")
  (setq dired-isearch-filenames t)
  (setq org-confirm-babel-evaluate nil)
#+end_src

* Packages

#+begin_src emacs-lisp
  (use-package python
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     (cons '(python . t) org-babel-load-languages)))

  (use-package eglot
    :custom (eglot-extend-to-xref t)
    :config
    (add-to-list 'eglot-server-programs '(python-mode . ("uv" "run" "ruff" "server")))
    :bind (:map eglot-mode-map
  	      ("C-c h" . eldoc)
  	      ("C-c f" . xref-find-definitions))
    :hook
    ((c-mode . eglot-ensure)
     (c++-mode . eglot-ensure)
     (python-mode . eglot-ensure)
     (lean4-mode . eglot-ensure)))

  (use-package helm
    :demand t
    :config
    (helm-mode 1)
    :bind
    (("M-x" . helm-M-x)
     ("C-x r b" . helm-filtered-bookmarks)
     ("C-x C-f" . helm-find-files)))

  (use-package evil
    :demand t
    :config
    (evil-mode 1)
    (evil-set-initial-state 'Info-mode 'emacs)
    (evil-set-initial-state 'dired-mode 'emacs)
    (evil-set-initial-state 'Man-mode 'emacs)
    (evil-set-initial-state 'xref--xref-buffer-mode 'emacs)
    (evil-set-initial-state 'help-mode 'emacs))

  (use-package evil-org
    :hook org-mode)

  (use-package magit)

  (use-package rime
    :custom
    (default-input-method "rime")
    (rime-disable-predicates
     '(rime-predicate-after-alphabet-char-p
       rime-predicate-prog-in-code-p)))
#+end_src
