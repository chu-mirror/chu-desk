:PROPERTIES:
:header-args:emacs-lisp: :noweb no-export :tangle no
:END:
#+STARTUP: content

* About this file
This file gives a detailed description of my emacs configuration,
and moreover, thanks to the support for literate programming of org-mode,
it's executable.

The structure of this file is simply a series of loosely coupled commands,
like all other people's emacs configuration. All dependencies are gathered
and placed at the beginning to retain an uniform set of names thoughout
the configuring. The same reason is also applied to helpers. All helper
functions have a name starting with 'my', and if it's only used in this file,
'my' is followed by '--', else '-'.

#+begin_src emacs-lisp :tangle yes
  (require 'package)
  (add-to-list 'package-archives
        '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (package-initialize)
  (add-to-list 'load-path (expand-file-name "package" user-emacs-directory))
  <<dependencies>>
  <<helpers>>
#+end_src

* Package Management
I use the macro 'use-package' to manage packages,
which is distributed with Emacs from 29.1, including installing, configuring.
The configuring in each using of use-package is limited to a small set
of possible options. The complete configuration is scattered throughout
this file. The usage of 'use-package' here is just an enhanced version
of 'require'.

To automatically install the used packages, this option is enabled.

#+begin_src emacs-lisp :noweb-ref dependencies
  (setq use-package-always-ensure t)
#+end_src

* Appearance
Here is some basic settings for a not disturbing looking.

#+begin_src emacs-lisp :tangle yes
  (load-theme 'modus-operandi)
  (set-face-attribute 'default nil :height 150)
  (setq project-mode-line t)
  (tool-bar-mode -1)
  (set-scroll-bar-mode nil)
  (menu-bar-mode -1)
#+end_src

* Action
People believe that Emacs is a general purpose interface to
computing infrastructure rather than just an editor. It's correct
to some extent. Of course, Emacs can not compete a real operating system,
but for a particular set of actions, Emacs can do amazingly well.
Action here means "copying a file into a directory", "modifying some code", etc.

This file's main purpose is to explain the set of actions that I perform on Emacs,
and makes them more efficient.

** Activity
Related actions are usually taken in a common context, like renaming, deleting, moving
file in Windows' file explorer. Emacs's command and buffer is also such
an example, but sometimes we would like to have multiple buffers cooperating to
achieve some bigger objects. For example, using gdb to debug a C program
usually requires multiple buffers, one to show current state of the running program,
one to show referenced source code, one to instruct gdb, etc. Not only it involves
multiple buffers, but also it consists of a series of commands to fully accomplish
its object.
I call such long lasting actions as activities, in contrast with commands in Emacs
that have immediate effect.

#+begin_src emacs-lisp :noweb-ref helpers
  (defvar my-activities
    '(
      <<my activities>>
      ))

  (defun my-activityp (av)
    (not (not (member av my-activities))))
#+end_src

There's an activity for default behaviour when no activity specified.

#+begin_src emacs-lisp :noweb-ref "my activities"
  emacs
#+end_src

Some mechanisms should be used to specify which activity is being taken. I use tab bar
for this task. Each tab has an activity attached. To take an activity means
to work on a new tab, and that tab has that activity attached.

#+begin_src emacs-lisp :tangle yes
  (setq tab-bar-tab-hints t)
  (setq tab-bar-select-tab-modifiers '(control))
  (tab-bar-mode)
#+end_src

#+begin_src emacs-lisp :noweb-ref helpers
  (defun my-tab-activity (tab-number)
    (let* ((tabs (funcall tab-bar-tabs-function))
  	 (tab-index (1- tab-number))
  	 (tab (nth tab-index tabs)))
      (alist-get 'my-activity tab 'emacs)))

  (defun my-current-activity (&optional tab-number)
    (interactive)
    (let ((av (my-tab-activity (or tab-number (1+ (tab-bar--current-tab-index))))))
      (message "The current activity: %s" (symbol-name av))))

  (defun my-take-activity (avn)
    "Start taking the activity in a new tab."
    (interactive
     (list (completing-read (format-prompt "The activity to take" "emacs")
  			  my-activities)))
    (tab-bar-new-tab)
    (tab-bar-rename-tab avn)
    (let ((av (intern avn))
  	(tab (tab-bar--current-tab-find)))
      (if (my-activityp av)
  	(progn
  	  <<initialization of |av| on |tab|>>
  	  )
        (user-error "No such activity: %s" avn))))
#+end_src

#+begin_src emacs-lisp :noweb-ref "initialization of |av| on |tab|"
  (nconc tab `((my-activity . ,av)))
#+end_src

I bind these activity related commands under C-x a. This will override
keybindings for abbreviation, but it doesn't matter because I don't use them.

#+begin_src emacs-lisp :noweb-ref helpers
  (defvar-keymap my-activity-keymap
    :doc "Keymap for activity related commands"
    "t" #'my-take-activity
    "c" #'my-current-activity)

  (defvar my-activity-specific-keymaps '())
  
  (defun my--set-activity-specific-keymap (av)
    (global-set-key (kbd "C-x a")
  		  (alist-get av my-activity-specific-keymaps)))
#+end_src

#+begin_src emacs-lisp :noweb-ref "initialization of |av| on |tab|"
  (my--set-activity-specific-keymap av)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (add-to-list
   'tab-bar-tab-post-select-functions
   (lambda (ft tt)
     (let ((av (alist-get 'my-activity tt)))
       (my--set-activity-specific-keymap av))))
  
  (add-hook
   'desktop-after-read-hook
   (lambda ()
     (let ((av (my-tab-activity (1+ (tab-bar--current-tab-index)))))
       (my--set-activity-specific-keymap av))))
#+end_src

Activity specific keymaps inherit bindings from my-activity-keymap.

#+begin_src emacs-lisp :noweb-ref helpers
    (defvar-keymap my-activity-emacs-keymap
      :doc "Keymap for activity 'emacs' related commands"
      :parent my-activity-keymap)

    (add-to-list 'my-activity-specific-keymaps
    	     `(emacs . ,my-activity-emacs-keymap))
#+end_src

The context of activities consists of a set of buffers, a set of rules to display buffers,
a current state, some activity specific commands.

I will not assign a single activity to each buffer, because different activities might
deal with a same buffer at the same time. For example, if I regard editing source file
and debugging as two different activities, then which activity should I assign for
the source file both for editing and debuging?
So I decide to delay the determination of the set of buffers
involved in a particular activity to the time I really need to deal with the set.
Maybe to use ibuffer.

#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

As for the set of rules to display buffers, a simple strategy is to customize
the displaying when the buffer satisfies some criteria and the current activity has
regulation on it. The following helper creates conditions for display-buffer-alist.

#+begin_src emacs-lisp :noweb-ref helpers
  (defun my-current-activity-is (av)
    (lambda (b) (eq av (my-current-activity))))
#+end_src

The state of activities is limited to the ones desktop.el can save.
Some activities might need not to save state. Close the corresponding tabs
when quiting Emacs.

#+begin_src emacs-lisp :noweb-ref helpers
  (defun my-activity-discard-state-p (av)
    (memq av '(
  	     <<activities to discard state>>
  	     )))
#+end_src

#+begin_src emacs-lisp :noweb-ref "activities to discard state"
  emacs
#+end_src

I am not sure whether _kill-emacs-hook_ runs after saving desktop file or not,
so run this when setting up Emacs instead.

#+begin_src emacs-lisp :tangle yes
  (desktop-save-mode 1)

  (add-hook
   'window-setup-hook
   (lambda ()
     (dolist (tab (tab-bar-tabs))
       (when (my-activity-discard-state-p (alist-get 'my-activity tab))
         (tab-bar-close-tab (1+ (tab-bar--tab-index tab)))))))
#+end_src

Some preparation can be done to get a comfortable state
before embarking on an activity.

#+begin_src emacs-lisp :noweb-ref helpers
  (defun my-activity-init (av)
    (let ((funcs
  	 (alist-get av
  		    `(
  		      <<init functions of activities>>
  		      ))))
      (dolist (f funcs)
        (funcall f))))
#+end_src

#+begin_src emacs-lisp :noweb-ref "initialization of |av| on |tab|"
  (my-activity-init av)
#+end_src

The default activity emacs are initialized to a single window displaying
buffer scratch.

#+begin_src emacs-lisp :noweb-ref "init functions of activities"
  (emacs ,(lambda () (display-buffer "*scratch*" '(display-buffer-full-frame))))
#+end_src

** Searching and Editing
These two concepts are too closly binded to explain one while not mentioning the other.
You must know what to edit to define objects to search, and you must know
where the object is to perform an editing.

There's a general purpose framework to select an object
from a set of candidates. I introduce it here because it's used everywhere.

#+begin_src emacs-lisp :noweb-ref dependencies
  (use-package helm
    :demand t
    :config
    (helm-mode 1)
    :bind
    (("M-x" . helm-M-x)
     ("C-x r b" . helm-filtered-bookmarks)
     ("C-x C-f" . helm-find-files)))
#+end_src

The following sections are named following a pattern of "SCOPE: TYPE OF OBJECT".

*** File: Plain Text
If the searching and the editing is limited to a single file,
I prefer vi's key bindings than Emacs's originals.

#+begin_src emacs-lisp :noweb-ref dependencies
  (use-package evil
    :demand t
    :custom
    (evil-want-C-u-delete t)
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    :config
    (evil-mode 1)
  (use-package evil-commentary
    :demand t
    :config
    (evil-commentary-mode))
  (require 'evil-textobj-entire)
#+end_src

Vi's key bindings are messing when not dealing with plain text.

#+begin_src emacs-lisp :tangle yes
  (evil-set-initial-state 'Info-mode 'emacs)
  (evil-set-initial-state 'dired-mode 'emacs)
  (evil-set-initial-state 'Man-mode 'emacs)
  (evil-set-initial-state 'xref--xref-buffer-mode 'emacs)
  (evil-set-initial-state 'help-mode 'emacs))
#+end_src

Some modification to key bindings.

#+begin_src emacs-lisp :tangle yes
  (keymap-unset evil-normal-state-map "M-." t)
  (define-key evil-outer-text-objects-map evil-textobj-entire-key 'evil-entire-entire-buffer)
  (define-key evil-inner-text-objects-map evil-textobj-entire-key 'evil-entire-entire-buffer)
#+end_src

I sometimes input CJK characters.

chu_desk_add_dep(librime-dev)
#+begin_src emacs-lisp :noweb-ref dependencies
  (use-package rime
    :custom
    (default-input-method "rime")
    (rime-disable-predicates
     '(rime-predicate-after-alphabet-char-p
       rime-predicate-prog-in-code-p)))
#+end_src

*** Project: Plain Text
I use project.el for this job.

- project-find-regexp (C-x p g)
- project-query-replace-regexp (C-x p r)

*** Project: Source Code
It's convenient if we can go beyond plain text, and operate on the structure
of source code directly. LSP is good for this purpose.

#+begin_src emacs-lisp :noweb-ref dependencies
  (use-package eglot
    :demand t
    :custom (eglot-extend-to-xref t)
    :bind (:map eglot-mode-map
  	      ("C-c h" . eldoc))
    :hook
    (
     <<the major modes that make use of eglot>>
     ))
#+end_src

*** Project: File
- project-find-file (C-x p f)
- project-dired (C-x p D)

*** File System: File
A shortcut to access the directory that contains all local repositories.

#+begin_src emacs-lisp :tangle yes
  (defun my-dired-reps ()
    (interactive)
    (dired (getenv "REPOSITORY_HOME")))

  (keymap-set my-activity-keymap "d" 'my-dired-reps)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (setq dired-maybe-use-globstar t)
  (setq dired-listing-switches "-ahl")
  (setq dired-isearch-filenames t)
#+end_src

** Meta
These actions take effect on Emacs, like buffer, window, etc, which
can not be classified in previous chapters.

#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-M-h") 'windmove-left)
  (global-set-key (kbd "C-M-j") 'windmove-down)
  (global-set-key (kbd "C-M-k") 'windmove-up)
  (global-set-key (kbd "C-M-l") 'windmove-right)
#+end_src

* General Editing
The most important activity is undoubtedly editing.
This chapter gives a common settings for all specific editing activities.

#+begin_src emacs-lisp :noweb-ref "my activities"
  editing
#+end_src

#+begin_src emacs-lisp :noweb-ref helpers
  (defvar-keymap my-activity-editing-keymap
    :doc "Keymap for activity 'editing' related commands"
    :parent my-activity-keymap)

  (add-to-list 'my-activity-specific-keymaps
  	     `(editing . ,my-activity-editing-keymap))
#+end_src

Some people might think of writing as simply output of thought,
but it's actually combination of input and output. When writing, writers of
articles have to check dictionaries, writers of research papers have to
read other papers, writers of code, or programmers, have to check
document, other part of code, debugger output, to get thought more clear
and eventually let thought flow out.

Reading is indivisible from writing, so to make reading more comfortable
while writing, I seperate the root window equally and horizontally
to two child windows: editing area and referencing area.
The child windows of each area is aranged vertically.
If the root window is not splited horizontally, the whole of it is
an editing area. In this case, the referencing area is nil.

This setting is good for a screen of normal size, for usually I
use only two columns of windows.

#+begin_src emacs-lisp :noweb-ref helpers
  (defun my-activity-editing-area (&optional window)
    (let* ((win (or window (selected-window)))
  	 (root (frame-root-window win)))
      (if (window-left-child root)
  	(unless (eq win root)
  	  (while (not (eq (window-parent win) root))
  	    (setq win (window-parent win))))
        (setq win root))
      win))

  (defun my-activity-editing-editing-area (&optional window)
    (let ((root (frame-root-window window)))
      (or (window-left-child root) root)))

  (defun my-activity-editing-referencing-area (&optional window)
    (let ((root (frame-root-window window)))
      (if (window-left-child root)
  	(window-next-sibling (my-activity-editing-editing-area window))
        nil)))

  (defun my-activity-editing-in-editing-area-p (&optional window)
    (eq (my-activity-editing-area window)
        (my-activity-editing-editing-area window)))

  (defun my-activity-editing-in-referencing-area-p (&optional window)
    (not (my-activity-editing-in-editing-area-p window)))
#+end_src

After the determination of area, there are some convenient commands.

#+begin_src emacs-lisp :noweb-ref helpers
  (defun my-activity-editing-close-referencing-area (&optional window)
    (interactive)
    (delete-window (my-activity-editing-referencing-area window)))

  (defun my--activity-editing-display-buffer-in-referencing-area (buffer alist)
    (let ((ref (my-activity-editing-referencing-area)))
      (when ref
        (delete-window ref))
      (window--display-buffer buffer (split-root-window-right) 'reuse alist)))

  (defun my-activity-editing-move-to-referencing-area (&optional window)
    (interactive)
    (let* ((win (or window (selected-window)))
  	 (buf (window-buffer win)))
      (delete-window win)
      (display-buffer buf '(my--activity-editing-display-buffer-in-referencing-area))))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (keymap-set my-activity-editing-keymap "h" #'my-activity-editing-close-referencing-area)
  (keymap-set my-activity-editing-keymap "m" #'my-activity-editing-move-to-referencing-area)
#+end_src

* Programming

#+begin_src emacs-lisp :noweb-ref "my activities"
  programming
#+end_src

#+begin_src emacs-lisp :noweb-ref helpers
  (defvar-keymap my-activity-programming-keymap
    :doc "Keymap for activity 'programming' related commands"
    :parent my-activity-editing-keymap)

  (add-to-list 'my-activity-specific-keymaps
  	     `(programming . ,my-activity-programming-keymap))
#+end_src

** C

#+begin_src emacs-lisp :noweb-ref "dependencies"
  (require 'cc-mode)
#+end_src

#+begin_src emacs-lisp :noweb-ref "the major modes that make use of eglot"
  (c-mode . eglot-ensure)
#+end_src

Fix the confict with window movements.

#+begin_src emacs-lisp :tangle yes
  (keymap-set c-mode-map "C-M-h" nil)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (setq c-basic-offset 4)
#+end_src

** C++

#+begin_src emacs-lisp :noweb-ref "the major modes that make use of eglot"
  (c++-mode . eglot-ensure)
#+end_src

** Agda

chu_desk_add_custom_dep(agda)m4_dnl
#+begin_src emacs-lisp :noweb-ref dependencies
  (load-file (let ((coding-system-for-read 'utf-8))
               (shell-command-to-string "agda-mode locate")))
#+end_src

** Python
     
#+begin_src emacs-lisp :noweb-ref "the major modes that make use of eglot"
  (python-mode . eglot-ensure)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'eglot-server-programs '(python-mode . ("uv" "run" "ruff" "server")))
#+end_src

* Version Control
I use magit for this job. It's an useful package, but the using is
itself an activity, so I should give it a dedicated label in my
framework.

#+begin_src emacs-lisp :noweb-ref "my activities"
  magit
#+end_src

The state of magit is not so useful.

#+begin_src emacs-lisp :noweb-ref "activities to discard state"
  magit
#+end_src

#+begin_src emacs-lisp :noweb-ref dependencies
  (use-package magit)
#+end_src

#+begin_src emacs-lisp :noweb-ref helpers
  (defvar-keymap my-activity-magit-keymap
    :doc "Keymap for activity 'magit related commands"
    :parent my-activity-keymap)

  (add-to-list 'my-activity-specific-keymaps
  	     `(magit . ,my-activity-magit-keymap))
#+end_src

#+begin_src emacs-lisp :noweb-ref "init functions of activities"
  (magit ,(lambda () (magit)))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'display-buffer-alist
  	     '("magit: *" (display-buffer-full-frame)))
#+end_src

* Org File

#+begin_src emacs-lisp :tangle yes
  (setq org-src-window-setup 'split-window-below)  
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   (cons '(python . t) org-babel-load-languages))
#+end_src

* Bibliography
- [[https://karthinks.com/software/emacs-window-management-almanac/][The Emacs window management almanac]]
  
  
